spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/campus_connect?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
    username: postgres
    password: janina

  mvc:
      pattern:
        matching-strategy: ant_path_matcher

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  security:
    oauth2:
      client:
        registration:
          google:
            - client-id: 342833311760-ld5bv7u2nsocr1k7uncm12hh8hq6hp7s.apps.googleusercontent.com
            - client-secret: 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
            - scope:
                - profile
                - email
            - redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            - authorization-grant-type: authorization_code
            - client-name: Google
        provider:
            google:
              authorization-uri: https://accounts.google.com/o/oauth2/auth
              token-uri: https://oauth2.googleapis.com/token
              user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo

app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000,http://localhost:8080
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect

